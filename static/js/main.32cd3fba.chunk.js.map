{"version":3,"sources":["api.js","RepoFinder.js","App.js","serviceWorker.js","index.js"],"names":["fetch","require","axios","default","githubV3Api","userInput","get","githubV4Api","authorization","method","headers","Authorization","body","JSON","stringify","query","RepoFinder","props","setReposFound","setFilter","useState","setUserInput","loadState","setLoadState","errorState","setErrorState","searchState","setSearchState","noRepos","setNoRepos","dropdownState","setDropdownState","userBlock","setUserBlock","apiAtuh","setApiAtuh","authToken","setAuthToken","onClick","a","then","response","data","length","catch","res","json","user","repositories","nodes","document","getElementById","value","reset","loadAuthToken","local","hasOwnProperty","className","Dropdown","options","key","text","fluid","selection","defaultValue","onChange","event","Popup","disabled","open","position","content","trigger","Input","id","type","e","target","onFocus","placeholder","maxLength","error","loading","onKeyPress","Icon","size","name","on","pinned","rel","href","App","reposFound","filter","Header","as","icon","map","x","i","toLowerCase","trim","match","List","celled","Item","Content","html_url","url","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.32cd3fba.chunk.js","sourcesContent":["const fetch = require(\"node-fetch\");\nconst axios = require(\"axios\").default;\n\nexport const githubV3Api = (userInput) => {\n  return axios.get(`https://api.github.com/users/${userInput}/repos`);\n};\n\nexport const githubV4Api = (userInput, authorization) => {\n  return fetch(\"https://api.github.com/graphql\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `bearer ${authorization}`,\n    },\n    body: JSON.stringify({\n      query: `\n                  {\n                      user(login: \"${userInput}\") {\n                       repositories(first: 100) {\n                       nodes {\n                            name\n                            url\n                          }\n                       }\n                      }\n                  }\n              `,\n    }),\n  });\n};\n\nexport const authTokenCheck = (authorization) => {\n  return fetch(\"https://api.github.com/graphql\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `bearer ${authorization}`,\n    },\n    body: JSON.stringify({\n      query: `\n                {\n                    __typename\n                }\n                  `,\n    }),\n  });\n};\n","import React, { useState } from \"react\";\nimport { Input, Icon, Popup, Dropdown } from \"semantic-ui-react\";\nimport { githubV3Api, githubV4Api, authTokenCheck } from \"./api\";\n\nexport default function RepoFinder(props) {\n  const { setReposFound, setFilter } = props;\n  const [userInput, setUserInput] = useState(\"\"); //Input from both textfields\n  const [loadState, setLoadState] = useState(false);\n  const [errorState, setErrorState] = useState(false);\n  const [searchState, setSearchState] = useState(false); //True --> User found and has repos then input is now used to filter repos / False --> User/repos not found\n  const [noRepos, setNoRepos] = useState(true); //False --> the user has no public repos / True --> The user has at least 1 repo\n  const [dropdownState, setDropdownState] = useState(1);\n  const [userBlock, setUserBlock] = useState(false); //Used to disable fields when using the api v4 option\n  const [apiAtuh, setApiAtuh] = useState(false); //True --> The token needed on apiv4 is valid\n  const [authToken, setAuthToken] = useState(\"\"); //Token needed to make queries on github's graphql api\n\n  const onClick = async () => {\n    if (!userInput) return;\n    setLoadState(true);\n    setErrorState(false);\n\n    if (dropdownState === 1) {\n      await githubV3Api(userInput)\n        .then((response) => {\n          if (response.data.length > 0) {\n            setReposFound(response.data);\n            setSearchState(true);\n            setNoRepos(true);\n          } else {\n            setNoRepos(false);\n          }\n        })\n        .catch(() => {\n          setErrorState(true);\n        });\n    } else {\n      await githubV4Api(userInput, authToken)\n        .then((res) => res.json())\n        .then((json) => {\n          if (json.data.user.repositories.nodes.length > 0) {\n            setReposFound(json.data.user.repositories.nodes);\n            setSearchState(true);\n            setNoRepos(true);\n          } else {\n            setNoRepos(false);\n          }\n        })\n        .catch(() => {\n          setErrorState(true);\n        });\n    }\n\n    setLoadState(false);\n    document.getElementById(\"inputField\").value = \"\";\n  };\n\n  const reset = () => {\n    setFilter(\"\");\n    setSearchState(false);\n    setReposFound(null);\n    setErrorState(false);\n    document.getElementById(\"inputField\").value = \"\";\n  };\n\n  const loadAuthToken = async () => {\n    setLoadState(true);\n    let local;\n\n    if (authToken && authToken.length > 0) {\n      await authTokenCheck(authToken)\n        .then((res) => res.json())\n        .then((json) => {\n          local = json;\n        });\n\n      if (local.hasOwnProperty(\"message\")) {\n        setErrorState(true);\n        setAuthToken(\"\");\n        document.getElementById(\"inputFieldToken\").value = \"\";\n      } else {\n        setApiAtuh(true);\n        setUserBlock(false);\n        setErrorState(false);\n        setSearchState(false);\n        setReposFound(null);\n      }\n    }\n\n    setLoadState(false);\n  };\n\n  const options = [\n    { key: 1, text: \"Api v3\", value: 1 },\n    { key: 2, text: \"Api v4\", value: 2 },\n  ];\n\n  return (\n    <>\n      <div className=\"userInput\">\n        <Dropdown\n          options={options}\n          fluid\n          selection\n          defaultValue={1}\n          onChange={(event, { value }) => {\n            reset();\n            setDropdownState(value);\n            if (!apiAtuh && value === 2) {\n              setUserBlock(true);\n              setSearchState(true);\n              setAuthToken(\"\");\n            } else {\n              setUserBlock(false);\n            }\n          }}\n        />\n\n        <Popup\n          disabled={noRepos}\n          open\n          position=\"top center\"\n          content={\n            !noRepos\n              ? `${userInput} has no public repositories`\n              : \"User not found\"\n          }\n          trigger={\n            <Input\n              id=\"inputField\"\n              type=\"text\"\n              onChange={(e) =>\n                searchState\n                  ? setFilter(e.target.value)\n                  : setUserInput(e.target.value)\n              }\n              onFocus={() => {\n                setNoRepos(true);\n                setErrorState(false);\n              }}\n              placeholder={\n                searchState && !userBlock ? \"Repository\" : \"Username...\"\n              }\n              maxLength=\"39\"\n              disabled={userBlock && searchState}\n              error={errorState && !userBlock}\n              loading={loadState && !userBlock}\n              onKeyPress={(e) => {\n                if (e.key === \"Enter\") onClick();\n              }}\n            />\n          }\n        />\n        <Icon\n          size=\"large\"\n          name={searchState && !userBlock ? \"undo\" : \"search\"}\n          disabled={userBlock && searchState}\n          onClick={() => (searchState ? reset() : onClick())}\n        />\n      </div>\n\n      {dropdownState === 2 && (\n        <div className=\"authInput\">\n          <Popup\n            position=\"bottom center\"\n            on=\"click\"\n            pinned\n            content={\n              <a\n                rel=\"noopener noreferrer\"\n                href=\"https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\"\n                target=\"_blank\"\n              >\n                You must generate a token to use the Api v4\n              </a>\n            }\n            trigger={\n              <Input\n                id=\"inputFieldToken\"\n                disabled={apiAtuh}\n                error={errorState && userBlock}\n                value={authToken}\n                placeholder=\"Write your personal access token\"\n                type=\"text\"\n                onChange={(e) => {\n                  setAuthToken(e.target.value);\n                }}\n                maxLength=\"100\"\n              />\n            }\n          />\n          <Icon\n            name={\n              apiAtuh\n                ? \"checkmark box\"\n                : loadState\n                ? \"sync\"\n                : \"arrow circle right\"\n            }\n            loading={loadState && userBlock}\n            disabled={apiAtuh}\n            onClick={() => {\n              if (authToken) loadAuthToken(authToken);\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport RepoFinder from \"./RepoFinder\";\nimport { List, Header, Icon } from \"semantic-ui-react\";\nimport \"./App.scss\";\n\nfunction App() {\n  const [reposFound, setReposFound] = useState(null); //Contains the array of repos returned by Github\n  const [filter, setFilter] = useState(null); //Searchbar filter\n\n  return (\n    <div className=\"App\">\n      <Header as=\"h1\" icon>\n        <Icon name=\"github\" />\n        Search for your repositories on GitHub!\n      </Header>\n\n      <RepoFinder setReposFound={setReposFound} setFilter={setFilter} />\n\n      <div className=\"repoList\">\n        {reposFound &&\n          reposFound.map(\n            (x, i) =>\n              //Returns every value if the filter has no value\n              //Looks for matches if filter has at least 1 character\n              (!filter ||\n                x.name\n                  .toLowerCase()\n                  .trim()\n                  .match(filter.toLowerCase().trim())) && (\n                <List celled key={i}>\n                  <List.Item>\n                    <List.Content>\n                      <List.Header\n                        as=\"a\"\n                        //The object returned by the api v3 has the repo url on html_url\n                        //the api v4 has it on url\n                        href={x.hasOwnProperty(\"html_url\") ? x.html_url : x.url}\n                        target=\"_blank\"\n                      >\n                        {x.name}\n                      </List.Header>\n                    </List.Content>\n                  </List.Item>\n                </List>\n              )\n          )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}